name: Betterer YourProjectName TS Code Quality  # <--- Adapt to your project needs

on:
  - push
#on:
#  push:
#    paths:
#      - 'src/**/*.tsx?'  # <--- Adapt to your project needs

env:
  PROJECT_NODE_VERSION: 16.3                                 # <--- Adapt to your project needs
  PROJECT_NAME: "platform"                                   # <--- Adapt to your project needs
  CHATOPS_RESULTS_FILE_UPDATE_COMMAND: 'betterer:update'     # <--- Adapt to your project needs
  BETTERER_CONFIG_FILE_PATH: ".betterer"                     # <--- Adapt to your project needs
  BETTERER_RESULTS_FILE_NAME: ".betterer.results"            # <--- Adapt to your project needs
  BETTERER_RESULTS_FILE_PATH: ".betterer.results"            # <--- Adapt to your project needs
  FORCE_COLOR: '1'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  code-quality-check:
    runs-on: ubuntu-18.04  # <--- Adapt to your project needs
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch "pr-request-msg.txt"
          touch "already-requested-changes-by-bot.txt"
      - name: Get Pull Request Number
        id: pr
        run: echo "::set-output name=pull_request_number::$(gh pr view --json number -q .number || echo "")"
      - uses: actions/github-script@v5
        env:
          OWNER: ${{ github.event.repository.owner.name }}
          REPOSITORY: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ steps.pr.outputs.pull_request_number }}
          BETTERER_EXIT_CODE: "1"
        with:
          script: |
            const bettererFailed = Number(process.env.BETTERER_EXIT_CODE) > 0
            const bettererPassed = !bettererFailed
            const notEmptyArray = (reviews) => reviews && reviews.length
            const containsBotReview = (reviews, state) => 
              notEmptyArray(reviews) && reviews.find((review) => review.node.state === state && review.node.author.login === "github-actions")
            const pullRequestNumber = Number(process.env.PR_NUMBER)
            const queryVariables = {
              owner: process.env.OWNER,
              repository: process.env.REPOSITORY,
              prNumber: pullRequestNumber,
            }
            const findLatestReviewsQuery = `query latestReviews($owner:String!,$repository:String!,$prNumber:Int!) {
              repository(owner:$owner,name:$repository) {
                pullRequest(number: $prNumber) {
                  id
                  latestReviews(last: 50) {
                    edges {
                      node {
                        id
                        state
                        author {
                          login
                        }
                      }
                    }
                  }
                }
              }
            }`;
            const updatePullRequestReviewMutation = `mutation($pullRequestReviewId:String!,$body:String!) {
              updatePullRequestReview(input: {pullRequestReviewId: $pullRequestReviewId, body: $body}) {
                pullRequestReview {
                  updatedAt
                }
              }
            }`;
            const addPullRequestReviewMutation = `mutation($pullRequestId:String!,$body:String!, $event:String) {
              addPullRequestReview(input: {pullRequestId: $pullRequestId, body: $body, event: $event}) {
                pullRequestReview {
                  updatedAt
                }
              }
            }`;
            const deletePullRequestReviewMutation = `mutation($pullRequestReviewId:String!) {
              deletePullRequestReview(input: {pullRequestReviewId: $pullRequestReviewId}) {
                pullRequestReview {
                  updatedAt
                }
              }
            }`;
            const removeAssigneesFromAssignableMutation = `mutation($assignableId:String!, $assigneeIds:[ID!]!) {
              removeAssigneesFromAssignable(input: {assignableId: $assignableId, assigneeIds: $assigneeIds, event: $event}) {
                pullRequestReview {
                  updatedAt
                }
              }
            }`;
            const result = await github.graphql(findLatestReviewsQuery, queryVariables)
            const { edges: reviews } = result.repository.pullRequest.latestReviews
            const { id: pullRequestId } = result.repository.pullRequest
            console.log(JSON.stringify(result, null, 2))
            console.log(JSON.stringify(reviews, null, 2))
            
            
            const requestChangesResult2 = await github.graphql(addPullRequestReviewMutation, {
              body: "‚ùå 1 => Requaesat changesasa",
              pullRequestId: pullRequestId,
            })
            
            console.log(JSON.stringify(requestChangesResult2, null, 2))
            return "asd"
            // REQUEST_CHANGES
            // ACCEPT
            const requestChangesResult = await github.graphql(addPullRequestReviewMutation, {
              event: "ACCEPT",
              body: "‚ùå 1 => Request changesasa",
              pullRequestId: pullRequestId,
            })
            const review = containsBotReview(reviews, "APPROVED")
            const updateResult = await github.graphql(updatePullRequestReviewMutation, { 
                pullRequestReviewId: review.node.id, 
                body: "üìù 2 => Update last comment" 
              })
            return "asd"
            const remo = await github.graphql(deletePullRequestReviewMutation, { 
              pullRequestReviewId: containsBotReview(reviews, "CHANGES_REQUESTED").node.id, 
            })
            console.log(JSON.stringify(remo, null, 2))
            
            
            
            
            

            if (bettererFailed && !containsBotReview(reviews, "CHANGES_REQUESTED") && !containsBotReview(reviews, "APPROVED")) {
              console.log("üö® 1 => Started: Request changes")
              console.log("‚≠êÔ∏è")
              const removeAssignee = await github.graphql(removeAssigneesFromAssignableMutation, { 
                event: "REQUEST_CHANGES",
                body: "‚ùå 1 => Request changes", 
                pullRequestId: pullRequestId, 
              })
              const requestChangesResult = await github.graphql(addPullRequestReviewMutation, { 
                event: "REQUEST_CHANGES",
                body: "‚ùå 1 => Request changes", 
                pullRequestId: pullRequestId, 
              })
              console.log("üåé")
              console.log(JSON.stringify(requestChangesResult, null, 2))
              console.log("‚úÖ 1 => End")
            }
            
            if (bettererFailed && containsBotReview(reviews, "CHANGES_REQUESTED")) {
              console.log("üö® 2 => Started: Update last comment")
              const review = containsBotReview(reviews, "CHANGES_REQUESTED")
              console.log("‚≠êÔ∏è")
              const updateResult = await github.graphql(updatePullRequestReviewMutation, { 
                pullRequestReviewId: review.node.id, 
                body: "üìù 2 => Update last comment" 
              })
              console.log("üåé")
              console.log(JSON.stringify(updateResult, null, 2))
              console.log("‚úÖ 2 => End")
            }
            
            if (bettererFailed && containsBotReview(reviews, "APPROVED")) {
              console.log("üö® 3 => Started: Request changes")
            }
            
            if (bettererPassed && containsBotReview(reviews, "CHANGES_REQUESTED")) {
              console.log("üö® 4 => Started: Approve")
            }
            
#      - uses: octokit/graphql-action@v2.x
#        id: get_bot_reviews
#        with:
#          query: |
#            query release($owner:String!,$repository:String!,$prNumber) {
#              repository(owner:$owner,name:$repository) {
#                pullRequest(number: $prNumber) {
#                  latestReviews(last: 100) {
#                    edges {
#                      node {
#                        id
#                        state
#                        author {
#                          login
#                        }
#                      }
#                    }
#                  }
#                }
#              }
#            }
#          owner: ${{ github.event.repository.owner.name }}
#          repository: ${{ github.event.repository.name }}
#          prNumber: ${{ steps.pr.outputs.pull_request_number }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - run: |
#          echo "‚úÖ latestReviews: ${{ steps.get_bot_reviews.outputs.data }}"
#          # {"data":{"repository":{"pullRequest":{"latestReviews":{"edges":[{"node":{"id":"PRR_kwDOGhRBJM4z686z","state":"CHANGES_REQUESTED","author":{"login":"github-actions"}}}]}}}
#      - uses: octokit/graphql-action@v2.x
#        id: update_bot_review
#        with:
#          query: |
#            mutation updatePullRequestReview($pullRequestReviewId:String!,$body:String!) {
#              updatePullRequestReview(input: {pullRequestReviewId: $pullRequestReviewId, body: $body}) {
#                pullRequestReview {
#                  updatedAt
#                }
#              }
#            }
#          pullRequestReviewId: ${{ github.event.repository.owner.name }}
#          body: "some test ‚ò†Ô∏è‚ù§Ô∏è"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - run: |
#          echo "‚úÖ updatePullRequestReview: ${{ steps.update_bot_review.outputs.data }}"
#      - name: Get last review
#        id: last_review
#        run: |
#          token=${{ secrets.GITHUB_TOKEN }}
#          base64AuthInfo="$token | base64 -e"
#
#          response=$(curl --request GET \
#          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.pull_request_number }}/reviews \
#          --header "Authorization: $base64AuthInfo" \
#          --header "Content-Type: application/json" \
#          --data '{ per_page: 100 }')
#
#          echo $response | jq 'last(.[] | select((.state=="CHANGES_REQUESTED") and (.user.login=="github-actions[bot]"))) | .id' >> already-requested-changes-by-bot.txt
#          echo $response | jq 'last(.[] | select((.state=="CHANGES_REQUESTED") and (.user.login=="github-actions[bot]")))' | echo $(</dev/stdin)
#
#          # echo $response
#
#          echo "‚õîÔ∏è $(cat already-requested-changes-by-bot.txt)"
#          export LAST_REVIEW_ID=$(cat already-requested-changes-by-bot.txt)
#          echo "‚ù§Ô∏è $LAST_REVIEW_ID"
#          echo "::set-output name=last_review_id::$(cat already-requested-changes-by-bot.txt)"
#      - id: coscos
#        run: |
#          token=${{ secrets.GITHUB_TOKEN }}
#          base64AuthInfo="$token | base64 -e"
#
#          response=$(curl --request PUT \
#          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.pull_request_number }}/reviews/${{ steps.last_review.outputs.last_review_id }}/events \
#          --header "Authorization: $base64AuthInfo" \
#          --header "Content-Type: application/json" \
#          --header "Accept: application/vnd.github.v3+json" \
#          --data '{ "body": "‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ asdasdassad" }')
#
#          response=$(curl --request PUT \
#          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.pull_request_number }}/reviews/${{ steps.last_review.outputs.last_review_id }}/events \
#          --header "Authorization: $base64AuthInfo" \
#          --header "Content-Type: application/json" \
#          --header "Accept: application/vnd.github.v3+json" \
#          --data '{ "body": "‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ asdasdassad", "event": "APPROVE" }')
#
#          echo "$response"
#
#
#
#          if [[ "$(cat already-requested-changes-by-bot.txt)" == "" ]]
#          then
#            echo "### ü§ñ BOT: I\'ve detected TypeScript quality changes!" >> pr-request-msg.txt
#            echo "CI job that compiles this project with "strict\'er" compilation detected changes. You have either fixed some TypeScript issues, or added new. You need to review those changes and either fix new TS issues, or accept new changes as "ok" which will store this state in file in repo." >> pr-request-msg.txt
#            echo " " >> pr-request-msg.txt
#            echo "| Project |" >> pr-request-msg.txt
#            echo "| ---- |" >> pr-request-msg.txt
#            echo "| ${{ env.PROJECT_NAME }} |" >> pr-request-msg.txt
#            echo " " >> pr-request-msg.txt
#            echo "| Action  | When to do it | What, or details |" >> pr-request-msg.txt
#            echo "| ---- | ----- | ----- |" >> pr-request-msg.txt
#            echo "| 1. See detailed report | Now | Open this [üîó link to ci job](https://github.com/${{ github.repository }}/runs/${{ env.GITHUB_RUN_ID }}?check_suite_focus=true) and check if there are some new TS errors you can fix. You can decide not to fix those issues - but keep in mind that we are trying to improve TS practices. |" >> pr-request-msg.txt
#            echo "| 2. Fix detected issues | The sooner the better :) | Use information from previous step to find TS errors and commit fixes. |" >> pr-request-msg.txt
#            echo "| 3. Update \`${{ env.BETTERER_RESULTS_FILE_NAME }}\` file | Before merge at most | Open this [üîó link to ci job](https://github.com/${{ github.repository }}/runs/${{ env.GITHUB_RUN_ID }}?check_suite_focus=true) and read instruction on how to update \`${{ env.BETTERER_RESULTS_FILE_NAME }}\` file |" >> pr-request-msg.txt
#            echo "üì´ Sending PR code review (request changes)"
#            gh pr review $PULL_REQUEST_NUMBER --request-changes --body "$(cat pr-request-msg.txt)"
#            echo "üì´ Sent!"
#          fi
#      - name: Use Node.js
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{ env.PROJECT_NODE_VERSION }}
#      - name: Install dependencies
#        run: yarn --frozen-lockfile --non-interactive --no-progress
#      - name: Incremental code quality check
#        uses: Evilweed/betterer-github-action@v1.0.0
#        with:
#          chatops_results_file_update_command: ${{ format('{0}:{1}', env.PROJECT_NAME, env.CHATOPS_RESULTS_FILE_UPDATE_COMMAND) }}
#          betterer_results_file_name: ${{ env.BETTERER_RESULTS_FILE_NAME }}
#          args: --config "/github/workspace/${{ env.BETTERER_CONFIG_FILE_PATH }}" --results "/github/workspace/${{ env.BETTERER_RESULTS_FILE_PATH }}" --reporter /build/custom-simple-reporter.js
